[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "recurtools"
description = "Tools for handling recursive sequences (of sequences of sequences of ...)"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Mike Foster"}]
dynamic = ["version"]
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]

[project.urls]
Homepage = "https://github.com/MusicalNinjaDad/recurtools"
# Documentation = "https://github.com/MusicalNinjaDad/recurtools"
Repository = "https://github.com/MusicalNinjaDad/recurtools"
Issues = "https://github.com/MusicalNinjaDad/recurtools/issues"
# Changelog = ""

[tool.setuptools.dynamic]
version = {file = "__version__"}

[tool.setuptools.packages.find]
where = ["."]

[project.optional-dependencies]
dev = [
    "numpy",
    "pytest",
    "ruff",
    ]

[tool.pytest.ini_options]
xfail_strict=true

[tool.coverage.run]
branch=true
omit=["test_*"]
dynamic_context = "test_function"

[tool.ruff]
line-length = 120
format.skip-magic-trailing-comma = false
format.quote-style = "double"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D1", # Missing Doc-Strings
    "D203", # We want D211 - no blank line before class docstring
    "D212", # We want D213 - Multiline docstrings start on second line 
    "ANN101", # Type annotation for `self`
    "ANN202", # Return type annotation for private functions
    "T", # `Print` statements
    ] 
flake8-pytest-style.fixture-parentheses = false
flake8-annotations.mypy-init-return = true


[tool.ruff.lint.per-file-ignores]
# Additional ignores for tests 
"**/test_*.py" = [
    "INP001", # Missing __init__.py
    "ANN", # Missing type annotations
    "S101", # Use of `assert`
    ]